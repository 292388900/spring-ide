<?xml version="1.0" encoding="UTF-8"?>
<project name="Generic targets" default="noDefault">

	<property name="updateSiteStagingLocation" value="${buildDirectory}/../updatesite" />
	<property name="eclipseStagingLocation" value="${buildDirectory}/../eclipse-stage" />
	<property file="${user.home}/.svn.properties" />

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<property name="allElementsFile" value="${builder}/allElements.xml" />
	<import file="${allElementsFile}" />

	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">

		<svn javahl="false" username="${svn.username}" password="${svn.password}">
			<export srcurl="${mapsRepo}" destpath="${buildDirectory}/maps" force="true" />
		</svn>

	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<delete dir="${buildDirectory}" />
		<tstamp />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<antcall target="generateUpdateSite" />
		
		<antcall target="pack200" />
		<antcall target="p2" />
		<antcall target="s3.publish" />
	</target>

	<target name="generateUpdateSite">

		<!-- Create the directory structure -->
		<mkdir dir="${updateSiteStagingLocation}" />
		<mkdir dir="${updateSiteStagingLocation}/features" />
		<mkdir dir="${updateSiteStagingLocation}/plugins" />
	
		<!-- Build the jar files -->
		<antcall target="allElements">
			<param name="genericTargets" value="${builder}/customTargets.xml" />
			<param name="target" value="updateSiteExport" />
		</antcall>

		<!-- Copy Orbit plug-ins -->
		<copy todir="${updateSiteStagingLocation}/plugins">
			<fileset dir="${buildDirectory}/plugins">
    			<include name="*.jar"/>
			</fileset>
		</copy>

		<!-- rename BRITS bundles to Eclipse bundle naming conventions -->
		<move todir="${updateSiteStagingLocation}/plugins" includeemptydirs="false">
		    <fileset dir="${updateSiteStagingLocation}/plugins">
		      <include name="*.jar"/>
		    </fileset>
			<mapper type="regexp" from="^(.*)\-(.*)$$" to="\1_\2"/>
		  </move>
		
		<!--Copy site.xml template  -->
		<copy file="${builder}/../site.xml" tofile="${updateSiteStagingLocation}/site.xml" overwrite="false" />
		<replace file="${updateSiteStagingLocation}/site.xml" token="@VERSION@" value="${featureVersion}.${forceContextQualifier}" summary="yes" />

		<!-- Create zip archive of update site -->
		<antcall target="createBuildDist" />
	</target>

	<target name="updateSiteExport">
		<ant antfile="build.xml" dir="${buildDirectory}/features/${id}/" target="build.update.jar">
			<property name="feature.destination" value="${updateSiteStagingLocation}/features" />
			<property name="plugin.destination" value="${updateSiteStagingLocation}/plugins" />
		</ant>
	</target>

	<target name="createBuildDist">
		<property name="buildDist.name" value="${sitePackagePrefix}_${sitePackageVersion}_${forceContextQualifier}" />
		<property name="buildDist.file" value="${updateSiteStagingLocation}/${buildDist.name}.zip" />
		<delete file="${buildDist.file}" />
		<zip zipfile="${buildDist.file}" filesonly="true">
			<zipfileset dir="${updateSiteStagingLocation}">
				<exclude name="*.zip" />
				<exclude name="**/*.gz" />
			</zipfileset>
		</zip>
		<checksum file="${buildDist.file}" algorithm="SHA1" fileext=".sha1" />
		<checksum file="${buildDist.file}" algorithm="MD5" fileext=".md5" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<target name="s3.publish" if="s3.publish">

		<echo>Publishing to Amazon S3</echo>

		<taskdef name="s3" classname="org.springframework.build.aws.ant.SimpleStorageService" />

		<s3 accessKey="${accessKey}" secretKey="${secretKey}">

			<delete bucketName="dist.springframework.org">
				<fileset dir="snapshot/IDE/${s3.publish}">
					<include name="site.xml" />
					<include name="content.jar" />
					<include name="artifacts.jar" />
					<include name="plugins/**" />
					<include name="features/**" />
				</fileset>
			</delete>

			<upload bucketName="dist.springframework.org" toDir="snapshot/IDE/${s3.publish}" publicRead="true">

				<fileset dir="${updateSiteStagingLocation}">
					<include name="**/*" />
					<include name="**" />
				</fileset>

			</upload>

		</s3>

	</target>

	<target name="pack200" if="pack200.enable">

		<java jvm="${java.home}/bin/java" jar="${builder}/../org.eclipse.releng.basebuilder/plugins/org.eclipse.equinox.launcher.jar" fork="true"
			failonerror="true" maxmemory="256m" dir="${buildDirectory}">
			<arg line="-application org.eclipse.update.core.siteOptimizer" />
			<arg line="-jarProcessor -verbose -processAll -repack -pack -outputDir ${updateSiteStagingLocation} ${updateSiteStagingLocation}" />
		</java>

	</target>

	<target name="p2" if="p2.enable">

		<java jvm="${java.home}/bin/java" jar="${builder}/../org.eclipse.releng.basebuilder/plugins/org.eclipse.equinox.launcher.jar" fork="true"
			failonerror="true" maxmemory="256m" dir="${buildDirectory}">
			<arg line="-application org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg line="-updateSite ${updateSiteStagingLocation} -site file://${updateSiteStagingLocation}/site.xml -metadataRepository file://${updateSiteStagingLocation} -metadataRepositoryName 'Spring IDE Update Site' -artifactRepository file://${updateSiteStagingLocation} -artifactRepositoryName 'Spring IDE Artifacts' -compress -reusePack200Files -noDefaultIUs" />
		</java>
		
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
