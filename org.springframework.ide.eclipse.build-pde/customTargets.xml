<?xml version="1.0" encoding="UTF-8"?>
<project name="Generic targets" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<property name="allElementsFile" value="${builder}/allElements.xml" />
	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">

		<svn javahl="true">
			<export srcurl="${mapsRepo}" destpath="${buildDirectory}/maps" force="true" />
		</svn>

	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<delete dir="${buildDirectory}" />
		<tstamp />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<property name="sitePackagePrefix" value="springide_updatesite" />
		<property name="sitePackageVersion" value="2.0.1" />
		<property name="featureVersion" value="2.0.1" />
		<antcall target="generateUpdateSite" />
		<antcall target="createEclipseStaging" />

		<java jar="${eclipseLauncherJar}" 
              fork="true" 
              failonerror="true" 
              maxmemory="256m" 
              dir="${buildDirectory}"> 
            <arg line="-application org.eclipse.update.core.siteOptimizer" /> 
            <arg line="-jarProcessor -verbose -processAll -repack -pack -outputDir ${updateSiteStagingLocation}" />
            <arg line="${updateSiteStagingLocation}" /> 
        </java> 
		
		<antcall target="publishToUpdateSiteDev" />
		
	</target>
	
	<target name="generateUpdateSite">
		<!-- Create the directory structure -->
		<mkdir dir="${updateSiteStagingLocation}" />
		<mkdir dir="${updateSiteStagingLocation}/features" />
		<mkdir dir="${updateSiteStagingLocation}/plugins" />
		<!-- Build the jar files -->
		<antcall target="allElements">
			<param name="genericTargets" value="${builder}/customTargets.xml" />
			<param name="target" value="updateSiteExport" />
		</antcall>
		<antcall target="copyNightlyBuildSiteXml" />
		<antcall target="createNightlyBuildSiteXml" />
		<antcall target="createNightlyBuildDist" />
	</target>
	
	<target name="publishToUpdateSiteDev" if="publishToServer">
		<property name="publish.directory" value="/home/springide/htdocs/updatesite_nightly" />
		<copy todir="${publish.directory}">
			<fileset dir="${updateSiteStagingLocation}">
				<exclude name="site.xml"/>
			</fileset>
		</copy>
		<copy file="${builder}/../site.xml" tofile="${publish.directory}/site.xml" overwrite="false" />
		<replace file="${publish.directory}/site.xml" summary="yes">
			<replacetoken><![CDATA[<category-def name="Core" label="Core" />]]></replacetoken>
			<replacevalue><![CDATA[<feature
		url="features/@FEATURE@_@VERSION@.jar"
		id="@FEATURE@" version="@VERSION@">
		<category name="@CATEGORY@" />
	</feature>

	<category-def name="Core" label="Core" />]]></replacevalue>
		</replace>
		<replace file="${publish.directory}/site.xml" token="@VERSION@" value="${featureVersion}.${forceContextQualifier}" summary="yes" />
		<replace file="${publish.directory}/site.xml" token="@FEATURE@" value="${featureName}" summary="yes" />
		<replace file="${publish.directory}/site.xml" token="@CATEGORY@" value="${featureCategory}" summary="yes" />

	</target>
	<target name="updateSiteExport">
		<ant antfile="build.xml" dir="${buildDirectory}/features/${id}/" target="build.update.jar">
			<property name="feature.destination" value="${updateSiteStagingLocation}/features" />
			<property name="plugin.destination" value="${updateSiteStagingLocation}/plugins" />
		</ant>
	</target>
	<target name="copyNightlyBuildSiteXml" unless="isNightlyBuild">
		<copy file="${builder}/../site.xml" tofile="${updateSiteStagingLocation}/site.xml" overwrite="false" />
	</target>
	<target name="createNightlyBuildSiteXml" unless="isNightlyBuild">
		<replace file="${updateSiteStagingLocation}/site.xml" summary="yes">
			<replacetoken><![CDATA[<category-def name="Core" label="Core" />]]></replacetoken>
			<replacevalue><![CDATA[<feature
		url="features/@FEATURE@_@VERSION@.jar"
		id="@FEATURE@" version="@VERSION@">
		<category name="@CATEGORY@" />
	</feature>

	<category-def name="Core" label="Core" />]]></replacevalue>
		</replace>
		<replace file="${updateSiteStagingLocation}/site.xml" token="@VERSION@" value="${featureVersion}.${forceContextQualifier}" summary="yes" />
		<replace file="${updateSiteStagingLocation}/site.xml" token="@FEATURE@" value="${featureName}" summary="yes" />
		<replace file="${updateSiteStagingLocation}/site.xml" token="@CATEGORY@" value="${featureCategory}" summary="yes" />
	</target>
	
	<target name="createNightlyBuildDist">
		<property name="buildDist.name" value="${sitePackagePrefix}_${sitePackageVersion}_${forceContextQualifier}" />
		<property name="buildDist.file" value="${updateSiteStagingLocation}/${buildDist.name}.zip" />
		<delete file="${buildDist.file}" />
		<zip zipfile="${buildDist.file}" filesonly="true">
			<zipfileset dir="${updateSiteStagingLocation}">
				<exclude name="*.zip"/>
				<exclude name="**/*.gz"/>
			</zipfileset>
		</zip>
	</target>
	
	<target name="createEclipseStaging" >
		<copy todir="${eclipseStagingLocation}">
			<fileset dir="${updateSiteStagingLocation}">
				<exclude name="site.xml"/>
				<exclude name="*.zip"/>
				<exclude name="**/*.gz"/>
			</fileset>
		</copy>
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>
	
	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
